// Code generated by MockGen. DO NOT EDIT.
// Source: datanode_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/filedag-project/filedag-storage/dag/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDataNodeClient is a mock of DataNodeClient interface.
type MockDataNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataNodeClientMockRecorder
}

// MockDataNodeClientMockRecorder is the mock recorder for MockDataNodeClient.
type MockDataNodeClientMockRecorder struct {
	mock *MockDataNodeClient
}

// NewMockDataNodeClient creates a new mock instance.
func NewMockDataNodeClient(ctrl *gomock.Controller) *MockDataNodeClient {
	mock := &MockDataNodeClient{ctrl: ctrl}
	mock.recorder = &MockDataNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataNodeClient) EXPECT() *MockDataNodeClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDataNodeClient) Delete(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption) (*proto.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDataNodeClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataNodeClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockDataNodeClient) Get(ctx context.Context, in *proto.GetRequest, opts ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataNodeClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataNodeClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockDataNodeClient) Put(ctx context.Context, in *proto.AddRequest, opts ...grpc.CallOption) (*proto.AddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*proto.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDataNodeClientMockRecorder) Put(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDataNodeClient)(nil).Put), varargs...)
}

// Size mocks base method.
func (m *MockDataNodeClient) Size(ctx context.Context, in *proto.SizeRequest, opts ...grpc.CallOption) (*proto.SizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Size", varargs...)
	ret0, _ := ret[0].(*proto.SizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockDataNodeClientMockRecorder) Size(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDataNodeClient)(nil).Size), varargs...)
}

// MockDataNodeServer is a mock of DataNodeServer interface.
type MockDataNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockDataNodeServerMockRecorder
}

// MockDataNodeServerMockRecorder is the mock recorder for MockDataNodeServer.
type MockDataNodeServerMockRecorder struct {
	mock *MockDataNodeServer
}

// NewMockDataNodeServer creates a new mock instance.
func NewMockDataNodeServer(ctrl *gomock.Controller) *MockDataNodeServer {
	mock := &MockDataNodeServer{ctrl: ctrl}
	mock.recorder = &MockDataNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataNodeServer) EXPECT() *MockDataNodeServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDataNodeServer) Delete(arg0 context.Context, arg1 *proto.DeleteRequest) (*proto.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDataNodeServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataNodeServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockDataNodeServer) Get(arg0 context.Context, arg1 *proto.GetRequest) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataNodeServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataNodeServer)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockDataNodeServer) Put(arg0 context.Context, arg1 *proto.AddRequest) (*proto.AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDataNodeServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDataNodeServer)(nil).Put), arg0, arg1)
}

// Size mocks base method.
func (m *MockDataNodeServer) Size(arg0 context.Context, arg1 *proto.SizeRequest) (*proto.SizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0, arg1)
	ret0, _ := ret[0].(*proto.SizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockDataNodeServerMockRecorder) Size(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDataNodeServer)(nil).Size), arg0, arg1)
}

// mustEmbedUnimplementedDataNodeServer mocks base method.
func (m *MockDataNodeServer) mustEmbedUnimplementedDataNodeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataNodeServer")
}

// mustEmbedUnimplementedDataNodeServer indicates an expected call of mustEmbedUnimplementedDataNodeServer.
func (mr *MockDataNodeServerMockRecorder) mustEmbedUnimplementedDataNodeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataNodeServer", reflect.TypeOf((*MockDataNodeServer)(nil).mustEmbedUnimplementedDataNodeServer))
}

// MockUnsafeDataNodeServer is a mock of UnsafeDataNodeServer interface.
type MockUnsafeDataNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDataNodeServerMockRecorder
}

// MockUnsafeDataNodeServerMockRecorder is the mock recorder for MockUnsafeDataNodeServer.
type MockUnsafeDataNodeServerMockRecorder struct {
	mock *MockUnsafeDataNodeServer
}

// NewMockUnsafeDataNodeServer creates a new mock instance.
func NewMockUnsafeDataNodeServer(ctrl *gomock.Controller) *MockUnsafeDataNodeServer {
	mock := &MockUnsafeDataNodeServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDataNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDataNodeServer) EXPECT() *MockUnsafeDataNodeServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDataNodeServer mocks base method.
func (m *MockUnsafeDataNodeServer) mustEmbedUnimplementedDataNodeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataNodeServer")
}

// mustEmbedUnimplementedDataNodeServer indicates an expected call of mustEmbedUnimplementedDataNodeServer.
func (mr *MockUnsafeDataNodeServerMockRecorder) mustEmbedUnimplementedDataNodeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataNodeServer", reflect.TypeOf((*MockUnsafeDataNodeServer)(nil).mustEmbedUnimplementedDataNodeServer))
}
