// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	dpuser "github.com/filedag-project/filedag-storage/dag/pool/poolservice/dpuser"
	gomock "github.com/golang/mock/gomock"
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"
)

// MockDagPool is a mock of DagPool interface.
type MockDagPool struct {
	ctrl     *gomock.Controller
	recorder *MockDagPoolMockRecorder
}

// MockDagPoolMockRecorder is the mock recorder for MockDagPool.
type MockDagPoolMockRecorder struct {
	mock *MockDagPool
}

// NewMockDagPool creates a new mock instance.
func NewMockDagPool(ctrl *gomock.Controller) *MockDagPool {
	mock := &MockDagPool{ctrl: ctrl}
	mock.recorder = &MockDagPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDagPool) EXPECT() *MockDagPoolMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDagPool) Add(ctx context.Context, block blocks.Block, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, block, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDagPoolMockRecorder) Add(ctx, block, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDagPool)(nil).Add), ctx, block, user, password)
}

// AddUser mocks base method.
func (m *MockDagPool) AddUser(newUser dpuser.DagPoolUser, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", newUser, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDagPoolMockRecorder) AddUser(newUser, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDagPool)(nil).AddUser), newUser, user, password)
}

// Close mocks base method.
func (m *MockDagPool) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDagPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDagPool)(nil).Close))
}

// DataRepairDisk mocks base method.
func (m *MockDagPool) DataRepairDisk(ctx context.Context, ip, port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataRepairDisk", ctx, ip, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataRepairDisk indicates an expected call of DataRepairDisk.
func (mr *MockDagPoolMockRecorder) DataRepairDisk(ctx, ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataRepairDisk", reflect.TypeOf((*MockDagPool)(nil).DataRepairDisk), ctx, ip, port)
}

// DataRepairHost mocks base method.
func (m *MockDagPool) DataRepairHost(ctx context.Context, oldIp, newIp, oldPort, newPort string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataRepairHost", ctx, oldIp, newIp, oldPort, newPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataRepairHost indicates an expected call of DataRepairHost.
func (mr *MockDagPoolMockRecorder) DataRepairHost(ctx, oldIp, newIp, oldPort, newPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataRepairHost", reflect.TypeOf((*MockDagPool)(nil).DataRepairHost), ctx, oldIp, newIp, oldPort, newPort)
}

// Get mocks base method.
func (m *MockDagPool) Get(ctx context.Context, c cid.Cid, user, password string) (blocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, c, user, password)
	ret0, _ := ret[0].(blocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDagPoolMockRecorder) Get(ctx, c, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDagPool)(nil).Get), ctx, c, user, password)
}

// GetSize mocks base method.
func (m *MockDagPool) GetSize(ctx context.Context, c cid.Cid, user, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize", ctx, c, user, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockDagPoolMockRecorder) GetSize(ctx, c, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockDagPool)(nil).GetSize), ctx, c, user, password)
}

// NeedPin mocks base method.
func (m *MockDagPool) NeedPin(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedPin", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedPin indicates an expected call of NeedPin.
func (mr *MockDagPoolMockRecorder) NeedPin(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedPin", reflect.TypeOf((*MockDagPool)(nil).NeedPin), username)
}

// Pin mocks base method.
func (m *MockDagPool) Pin(ctx context.Context, c cid.Cid, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", ctx, c, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pin indicates an expected call of Pin.
func (mr *MockDagPoolMockRecorder) Pin(ctx, c, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockDagPool)(nil).Pin), ctx, c, user, password)
}

// QueryUser mocks base method.
func (m *MockDagPool) QueryUser(qUser, user, password string) (*dpuser.DagPoolUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUser", qUser, user, password)
	ret0, _ := ret[0].(*dpuser.DagPoolUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUser indicates an expected call of QueryUser.
func (mr *MockDagPoolMockRecorder) QueryUser(qUser, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUser", reflect.TypeOf((*MockDagPool)(nil).QueryUser), qUser, user, password)
}

// Remove mocks base method.
func (m *MockDagPool) Remove(ctx context.Context, c cid.Cid, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, c, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDagPoolMockRecorder) Remove(ctx, c, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDagPool)(nil).Remove), ctx, c, user, password)
}

// RemoveUser mocks base method.
func (m *MockDagPool) RemoveUser(rmUser, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", rmUser, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockDagPoolMockRecorder) RemoveUser(rmUser, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDagPool)(nil).RemoveUser), rmUser, user, password)
}

// UnPin mocks base method.
func (m *MockDagPool) UnPin(ctx context.Context, c cid.Cid, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnPin", ctx, c, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnPin indicates an expected call of UnPin.
func (mr *MockDagPoolMockRecorder) UnPin(ctx, c, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnPin", reflect.TypeOf((*MockDagPool)(nil).UnPin), ctx, c, user, password)
}

// UpdateUser mocks base method.
func (m *MockDagPool) UpdateUser(uUser dpuser.DagPoolUser, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", uUser, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDagPoolMockRecorder) UpdateUser(uUser, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDagPool)(nil).UpdateUser), uUser, user, password)
}
