// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filedag-project/filedag-storage/dag/pool/client (interfaces: PoolClient,DataPin)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
	format "github.com/ipfs/go-ipld-format"
)

// MockPoolClient is a mock of PoolClient interface.
type MockPoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoolClientMockRecorder
}

// MockPoolClientMockRecorder is the mock recorder for MockPoolClient.
type MockPoolClientMockRecorder struct {
	mock *MockPoolClient
}

// NewMockPoolClient creates a new mock instance.
func NewMockPoolClient(ctrl *gomock.Controller) *MockPoolClient {
	mock := &MockPoolClient{ctrl: ctrl}
	mock.recorder = &MockPoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolClient) EXPECT() *MockPoolClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPoolClient) Add(arg0 context.Context, arg1 format.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPoolClientMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPoolClient)(nil).Add), arg0, arg1)
}

// AddMany mocks base method.
func (m *MockPoolClient) AddMany(arg0 context.Context, arg1 []format.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMany indicates an expected call of AddMany.
func (mr *MockPoolClientMockRecorder) AddMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMany", reflect.TypeOf((*MockPoolClient)(nil).AddMany), arg0, arg1)
}

// Close mocks base method.
func (m *MockPoolClient) Close(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *MockPoolClientMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoolClient)(nil).Close), arg0)
}

// Get mocks base method.
func (m *MockPoolClient) Get(arg0 context.Context, arg1 cid.Cid) (format.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(format.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPoolClient)(nil).Get), arg0, arg1)
}

// GetMany mocks base method.
func (m *MockPoolClient) GetMany(arg0 context.Context, arg1 []cid.Cid) <-chan *format.NodeOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", arg0, arg1)
	ret0, _ := ret[0].(<-chan *format.NodeOption)
	return ret0
}

// GetMany indicates an expected call of GetMany.
func (mr *MockPoolClientMockRecorder) GetMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockPoolClient)(nil).GetMany), arg0, arg1)
}

// Remove mocks base method.
func (m *MockPoolClient) Remove(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPoolClientMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPoolClient)(nil).Remove), arg0, arg1)
}

// RemoveMany mocks base method.
func (m *MockPoolClient) RemoveMany(arg0 context.Context, arg1 []cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMany indicates an expected call of RemoveMany.
func (mr *MockPoolClientMockRecorder) RemoveMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMany", reflect.TypeOf((*MockPoolClient)(nil).RemoveMany), arg0, arg1)
}

// MockDataPin is a mock of DataPin interface.
type MockDataPin struct {
	ctrl     *gomock.Controller
	recorder *MockDataPinMockRecorder
}

// MockDataPinMockRecorder is the mock recorder for MockDataPin.
type MockDataPinMockRecorder struct {
	mock *MockDataPin
}

// NewMockDataPin creates a new mock instance.
func NewMockDataPin(ctrl *gomock.Controller) *MockDataPin {
	mock := &MockDataPin{ctrl: ctrl}
	mock.recorder = &MockDataPinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataPin) EXPECT() *MockDataPinMockRecorder {
	return m.recorder
}

// IsPin mocks base method.
func (m *MockDataPin) IsPin(arg0 context.Context, arg1 cid.Cid) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPin indicates an expected call of IsPin.
func (mr *MockDataPinMockRecorder) IsPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPin", reflect.TypeOf((*MockDataPin)(nil).IsPin), arg0, arg1)
}

// Pin mocks base method.
func (m *MockDataPin) Pin(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pin indicates an expected call of Pin.
func (mr *MockDataPinMockRecorder) Pin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockDataPin)(nil).Pin), arg0, arg1)
}

// UnPin mocks base method.
func (m *MockDataPin) UnPin(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnPin indicates an expected call of UnPin.
func (mr *MockDataPinMockRecorder) UnPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnPin", reflect.TypeOf((*MockDataPin)(nil).UnPin), arg0, arg1)
}
