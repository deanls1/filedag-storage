// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_cid "github.com/ipfs/go-cid"
	go_ipld_format "github.com/ipfs/go-ipld-format"
)

// MockPoolClient is a mock of PoolClient interface.
type MockPoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoolClientMockRecorder
}

// MockPoolClientMockRecorder is the mock recorder for MockPoolClient.
type MockPoolClientMockRecorder struct {
	mock *MockPoolClient
}

// NewMockPoolClient creates a new mock instance.
func NewMockPoolClient(ctrl *gomock.Controller) *MockPoolClient {
	mock := &MockPoolClient{ctrl: ctrl}
	mock.recorder = &MockPoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolClient) EXPECT() *MockPoolClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPoolClient) Add(ctx context.Context, node go_ipld_format.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPoolClientMockRecorder) Add(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPoolClient)(nil).Add), ctx, node)
}

// AddMany mocks base method.
func (m *MockPoolClient) AddMany(ctx context.Context, nodes []go_ipld_format.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMany", ctx, nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMany indicates an expected call of AddMany.
func (mr *MockPoolClientMockRecorder) AddMany(ctx, nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMany", reflect.TypeOf((*MockPoolClient)(nil).AddMany), ctx, nodes)
}

// Close mocks base method.
func (m *MockPoolClient) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockPoolClientMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoolClient)(nil).Close), ctx)
}

// Get mocks base method.
func (m *MockPoolClient) Get(ctx context.Context, cid go_cid.Cid) (go_ipld_format.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cid)
	ret0, _ := ret[0].(go_ipld_format.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolClientMockRecorder) Get(ctx, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPoolClient)(nil).Get), ctx, cid)
}

// GetMany mocks base method.
func (m *MockPoolClient) GetMany(ctx context.Context, cids []go_cid.Cid) <-chan *go_ipld_format.NodeOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, cids)
	ret0, _ := ret[0].(<-chan *go_ipld_format.NodeOption)
	return ret0
}

// GetMany indicates an expected call of GetMany.
func (mr *MockPoolClientMockRecorder) GetMany(ctx, cids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockPoolClient)(nil).GetMany), ctx, cids)
}

// Remove mocks base method.
func (m *MockPoolClient) Remove(ctx context.Context, cid go_cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPoolClientMockRecorder) Remove(ctx, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPoolClient)(nil).Remove), ctx, cid)
}

// RemoveMany mocks base method.
func (m *MockPoolClient) RemoveMany(ctx context.Context, cids []go_cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMany", ctx, cids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMany indicates an expected call of RemoveMany.
func (mr *MockPoolClientMockRecorder) RemoveMany(ctx, cids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMany", reflect.TypeOf((*MockPoolClient)(nil).RemoveMany), ctx, cids)
}
