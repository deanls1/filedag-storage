// Code generated by MockGen. DO NOT EDIT.
// Source: dagpool_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/filedag-project/filedag-storage/dag/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDagPoolClient is a mock of DagPoolClient interface.
type MockDagPoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockDagPoolClientMockRecorder
}

// MockDagPoolClientMockRecorder is the mock recorder for MockDagPoolClient.
type MockDagPoolClientMockRecorder struct {
	mock *MockDagPoolClient
}

// NewMockDagPoolClient creates a new mock instance.
func NewMockDagPoolClient(ctrl *gomock.Controller) *MockDagPoolClient {
	mock := &MockDagPoolClient{ctrl: ctrl}
	mock.recorder = &MockDagPoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDagPoolClient) EXPECT() *MockDagPoolClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDagPoolClient) Add(ctx context.Context, in *proto.AddReq, opts ...grpc.CallOption) (*proto.AddReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*proto.AddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDagPoolClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDagPoolClient)(nil).Add), varargs...)
}

// AddUser mocks base method.
func (m *MockDagPoolClient) AddUser(ctx context.Context, in *proto.AddUserReq, opts ...grpc.CallOption) (*proto.AddUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*proto.AddUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDagPoolClientMockRecorder) AddUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDagPoolClient)(nil).AddUser), varargs...)
}

// Get mocks base method.
func (m *MockDagPoolClient) Get(ctx context.Context, in *proto.GetReq, opts ...grpc.CallOption) (*proto.GetReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDagPoolClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDagPoolClient)(nil).Get), varargs...)
}

// QueryUser mocks base method.
func (m *MockDagPoolClient) QueryUser(ctx context.Context, in *proto.QueryUserReq, opts ...grpc.CallOption) (*proto.QueryUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryUser", varargs...)
	ret0, _ := ret[0].(*proto.QueryUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUser indicates an expected call of QueryUser.
func (mr *MockDagPoolClientMockRecorder) QueryUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUser", reflect.TypeOf((*MockDagPoolClient)(nil).QueryUser), varargs...)
}

// Remove mocks base method.
func (m *MockDagPoolClient) Remove(ctx context.Context, in *proto.RemoveReq, opts ...grpc.CallOption) (*proto.RemoveReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(*proto.RemoveReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockDagPoolClientMockRecorder) Remove(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDagPoolClient)(nil).Remove), varargs...)
}

// RemoveUser mocks base method.
func (m *MockDagPoolClient) RemoveUser(ctx context.Context, in *proto.RemoveUserReq, opts ...grpc.CallOption) (*proto.RemoveUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUser", varargs...)
	ret0, _ := ret[0].(*proto.RemoveUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockDagPoolClientMockRecorder) RemoveUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDagPoolClient)(nil).RemoveUser), varargs...)
}

// UpdateUser mocks base method.
func (m *MockDagPoolClient) UpdateUser(ctx context.Context, in *proto.UpdateUserReq, opts ...grpc.CallOption) (*proto.UpdateUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*proto.UpdateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDagPoolClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDagPoolClient)(nil).UpdateUser), varargs...)
}

// MockDagPoolServer is a mock of DagPoolServer interface.
type MockDagPoolServer struct {
	ctrl     *gomock.Controller
	recorder *MockDagPoolServerMockRecorder
}

// MockDagPoolServerMockRecorder is the mock recorder for MockDagPoolServer.
type MockDagPoolServerMockRecorder struct {
	mock *MockDagPoolServer
}

// NewMockDagPoolServer creates a new mock instance.
func NewMockDagPoolServer(ctrl *gomock.Controller) *MockDagPoolServer {
	mock := &MockDagPoolServer{ctrl: ctrl}
	mock.recorder = &MockDagPoolServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDagPoolServer) EXPECT() *MockDagPoolServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDagPoolServer) Add(arg0 context.Context, arg1 *proto.AddReq) (*proto.AddReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDagPoolServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDagPoolServer)(nil).Add), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockDagPoolServer) AddUser(arg0 context.Context, arg1 *proto.AddUserReq) (*proto.AddUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDagPoolServerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDagPoolServer)(nil).AddUser), arg0, arg1)
}

// Get mocks base method.
func (m *MockDagPoolServer) Get(arg0 context.Context, arg1 *proto.GetReq) (*proto.GetReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDagPoolServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDagPoolServer)(nil).Get), arg0, arg1)
}

// QueryUser mocks base method.
func (m *MockDagPoolServer) QueryUser(arg0 context.Context, arg1 *proto.QueryUserReq) (*proto.QueryUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUser indicates an expected call of QueryUser.
func (mr *MockDagPoolServerMockRecorder) QueryUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUser", reflect.TypeOf((*MockDagPoolServer)(nil).QueryUser), arg0, arg1)
}

// Remove mocks base method.
func (m *MockDagPoolServer) Remove(arg0 context.Context, arg1 *proto.RemoveReq) (*proto.RemoveReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(*proto.RemoveReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockDagPoolServerMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDagPoolServer)(nil).Remove), arg0, arg1)
}

// RemoveUser mocks base method.
func (m *MockDagPoolServer) RemoveUser(arg0 context.Context, arg1 *proto.RemoveUserReq) (*proto.RemoveUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.RemoveUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockDagPoolServerMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDagPoolServer)(nil).RemoveUser), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDagPoolServer) UpdateUser(arg0 context.Context, arg1 *proto.UpdateUserReq) (*proto.UpdateUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDagPoolServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDagPoolServer)(nil).UpdateUser), arg0, arg1)
}

// mustEmbedUnimplementedDagPoolServer mocks base method.
func (m *MockDagPoolServer) mustEmbedUnimplementedDagPoolServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDagPoolServer")
}

// mustEmbedUnimplementedDagPoolServer indicates an expected call of mustEmbedUnimplementedDagPoolServer.
func (mr *MockDagPoolServerMockRecorder) mustEmbedUnimplementedDagPoolServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDagPoolServer", reflect.TypeOf((*MockDagPoolServer)(nil).mustEmbedUnimplementedDagPoolServer))
}

// MockUnsafeDagPoolServer is a mock of UnsafeDagPoolServer interface.
type MockUnsafeDagPoolServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDagPoolServerMockRecorder
}

// MockUnsafeDagPoolServerMockRecorder is the mock recorder for MockUnsafeDagPoolServer.
type MockUnsafeDagPoolServerMockRecorder struct {
	mock *MockUnsafeDagPoolServer
}

// NewMockUnsafeDagPoolServer creates a new mock instance.
func NewMockUnsafeDagPoolServer(ctrl *gomock.Controller) *MockUnsafeDagPoolServer {
	mock := &MockUnsafeDagPoolServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDagPoolServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDagPoolServer) EXPECT() *MockUnsafeDagPoolServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDagPoolServer mocks base method.
func (m *MockUnsafeDagPoolServer) mustEmbedUnimplementedDagPoolServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDagPoolServer")
}

// mustEmbedUnimplementedDagPoolServer indicates an expected call of mustEmbedUnimplementedDagPoolServer.
func (mr *MockUnsafeDagPoolServerMockRecorder) mustEmbedUnimplementedDagPoolServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDagPoolServer", reflect.TypeOf((*MockUnsafeDagPoolServer)(nil).mustEmbedUnimplementedDagPoolServer))
}
