// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: dagpool.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DagPoolClient is the client API for DagPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DagPoolClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddReply, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetReply, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveReply, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserReply, error)
	RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserReply, error)
	QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error)
	Pin(ctx context.Context, in *PinReq, opts ...grpc.CallOption) (*PinReply, error)
	UnPin(ctx context.Context, in *UnPinReq, opts ...grpc.CallOption) (*UnPinReply, error)
}

type dagPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewDagPoolClient(cc grpc.ClientConnInterface) DagPoolClient {
	return &dagPoolClient{cc}
}

func (c *dagPoolClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserReply, error) {
	out := new(AddUserReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserReply, error) {
	out := new(RemoveUserReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserReply, error) {
	out := new(QueryUserReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/QueryUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) Pin(ctx context.Context, in *PinReq, opts ...grpc.CallOption) (*PinReply, error) {
	out := new(PinReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/Pin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagPoolClient) UnPin(ctx context.Context, in *UnPinReq, opts ...grpc.CallOption) (*UnPinReply, error) {
	out := new(UnPinReply)
	err := c.cc.Invoke(ctx, "/proto.DagPool/UnPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DagPoolServer is the server API for DagPool service.
// All implementations must embed UnimplementedDagPoolServer
// for forward compatibility
type DagPoolServer interface {
	Add(context.Context, *AddReq) (*AddReply, error)
	Get(context.Context, *GetReq) (*GetReply, error)
	Remove(context.Context, *RemoveReq) (*RemoveReply, error)
	AddUser(context.Context, *AddUserReq) (*AddUserReply, error)
	RemoveUser(context.Context, *RemoveUserReq) (*RemoveUserReply, error)
	QueryUser(context.Context, *QueryUserReq) (*QueryUserReply, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	Pin(context.Context, *PinReq) (*PinReply, error)
	UnPin(context.Context, *UnPinReq) (*UnPinReply, error)
	mustEmbedUnimplementedDagPoolServer()
}

// UnimplementedDagPoolServer must be embedded to have forward compatible implementations.
type UnimplementedDagPoolServer struct {
}

func (UnimplementedDagPoolServer) Add(context.Context, *AddReq) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDagPoolServer) Get(context.Context, *GetReq) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDagPoolServer) Remove(context.Context, *RemoveReq) (*RemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDagPoolServer) AddUser(context.Context, *AddUserReq) (*AddUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedDagPoolServer) RemoveUser(context.Context, *RemoveUserReq) (*RemoveUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedDagPoolServer) QueryUser(context.Context, *QueryUserReq) (*QueryUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedDagPoolServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDagPoolServer) Pin(context.Context, *PinReq) (*PinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pin not implemented")
}
func (UnimplementedDagPoolServer) UnPin(context.Context, *UnPinReq) (*UnPinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPin not implemented")
}
func (UnimplementedDagPoolServer) mustEmbedUnimplementedDagPoolServer() {}

// UnsafeDagPoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DagPoolServer will
// result in compilation errors.
type UnsafeDagPoolServer interface {
	mustEmbedUnimplementedDagPoolServer()
}

func RegisterDagPoolServer(s grpc.ServiceRegistrar, srv DagPoolServer) {
	s.RegisterService(&DagPool_ServiceDesc, srv)
}

func _DagPool_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).RemoveUser(ctx, req.(*RemoveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/QueryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).QueryUser(ctx, req.(*QueryUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_Pin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).Pin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/Pin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).Pin(ctx, req.(*PinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagPool_UnPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagPoolServer).UnPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DagPool/UnPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagPoolServer).UnPin(ctx, req.(*UnPinReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DagPool_ServiceDesc is the grpc.ServiceDesc for DagPool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DagPool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DagPool",
	HandlerType: (*DagPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DagPool_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DagPool_Get_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DagPool_Remove_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _DagPool_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _DagPool_RemoveUser_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _DagPool_QueryUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DagPool_UpdateUser_Handler,
		},
		{
			MethodName: "Pin",
			Handler:    _DagPool_Pin_Handler,
		},
		{
			MethodName: "UnPin",
			Handler:    _DagPool_UnPin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dagpool.proto",
}
